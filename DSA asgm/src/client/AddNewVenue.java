package client;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import adt.ArrayList;
import adt.ListInterface;
import entity.Venue;
import java.awt.HeadlessException;
import javax.swing.JOptionPane;

/**
 *
 * @author Ang Chia Ling
 */
public class AddNewVenue extends javax.swing.JFrame {

    // variable declaration
    private static ListInterface<Venue> venueList = new ArrayList<>();
    VenueFile venuefile = new VenueFile();

    /**
     * Creates new form AddNewVenue2
     */
    public AddNewVenue() {
        initComponents();
        jTextFieldAddNewCapacity.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabelAddNewVenue = new javax.swing.JLabel();
        jLabelNewVenueName = new javax.swing.JLabel();
        jLabelNewVenueType = new javax.swing.JLabel();
        jLabelNewCapacity = new javax.swing.JLabel();
        jTextFieldNewVenueName = new javax.swing.JTextField();
        jComboBoxNewVenueType = new javax.swing.JComboBox<>();
        jTextFieldAddNewCapacity = new javax.swing.JTextField();
        jLabelOther = new javax.swing.JLabel();
        jTextFieldOther = new javax.swing.JTextField();
        jButtonAddNewType = new javax.swing.JButton();
        jButtonConfirm = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabelEmptyVenue = new javax.swing.JLabel();
        jLabelEmptyCapacity = new javax.swing.JLabel();
        jLabelEmptyType = new javax.swing.JLabel();
        jLabelEmptyOther = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelAddNewVenue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelAddNewVenue.setText("Add New Venue");

        jLabelNewVenueName.setText("Venue Name: ");

        jLabelNewVenueType.setText("Type:");

        jLabelNewCapacity.setText("Capacity:");

        jTextFieldNewVenueName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldNewVenueNameKeyReleased(evt);
            }
        });

        jComboBoxNewVenueType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PLEASE CHOOSE ONE OF THE OPTIONS", "SMALL-SIZED CLASSROOM", "BIG-SIZED CLASSROOM", "SMALL-SIZED LECTURE HALL", "MEDIUM-SIZED LECTURE HALL", "BIG-SIZED LECTURE HALL" }));
        jComboBoxNewVenueType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNewVenueTypeItemStateChanged(evt);
            }
        });

        jTextFieldAddNewCapacity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldAddNewCapacityKeyReleased(evt);
            }
        });

        jLabelOther.setText("Other:");

        jTextFieldOther.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldOtherKeyReleased(evt);
            }
        });

        jButtonAddNewType.setText("Add");
        jButtonAddNewType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNewTypeActionPerformed(evt);
            }
        });

        jButtonConfirm.setText("Confirm");
        jButtonConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConfirmActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabelEmptyVenue.setForeground(new java.awt.Color(255, 0, 0));
        jLabelEmptyVenue.setText(" ");

        jLabelEmptyCapacity.setForeground(new java.awt.Color(255, 0, 0));
        jLabelEmptyCapacity.setText(" ");

        jLabelEmptyType.setForeground(new java.awt.Color(255, 0, 0));
        jLabelEmptyType.setText(" ");

        jLabelEmptyOther.setForeground(new java.awt.Color(255, 0, 0));
        jLabelEmptyOther.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(jButtonConfirm)
                        .addGap(97, 97, 97)
                        .addComponent(jButtonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jLabelAddNewVenue)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabelNewVenueType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelNewCapacity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldAddNewCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEmptyCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelNewVenueName, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEmptyVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNewVenueName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jComboBoxNewVenueType, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabelOther, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabelEmptyType, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelEmptyOther, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButtonAddNewType)))))
                                .addGap(0, 9, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAddNewVenue, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNewVenueName)
                    .addComponent(jTextFieldNewVenueName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabelEmptyVenue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOther)
                    .addComponent(jTextFieldOther, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddNewType)
                    .addComponent(jComboBoxNewVenueType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNewVenueType))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEmptyType)
                    .addComponent(jLabelEmptyOther))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAddNewCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNewCapacity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelEmptyCapacity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonConfirm)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
        // go back to venue management if user entered cancel
        new VenueManagement().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonAddNewTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddNewTypeActionPerformed
        // TODO add your handling code here:
        // check whether new type of venue is empty or not (" " or <enter>)
        if (jTextFieldOther.getText().trim().isEmpty()) {
            jLabelEmptyOther.setText("Please enter valid venue type!");
        } else {
            // add new type into combo box selection
            String newType = jTextFieldOther.getText().toUpperCase();
            jComboBoxNewVenueType.addItem(newType);
        }
    }//GEN-LAST:event_jButtonAddNewTypeActionPerformed

    private void jButtonConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConfirmActionPerformed
        // read file and store into arraylist(venueList)
        venueList = venuefile.reader("VenueFile.txt");
        boolean successful = false;

        // validation for empty field
        if (jTextFieldNewVenueName.getText().trim().isEmpty() && jComboBoxNewVenueType.getSelectedIndex() == 0 && jTextFieldAddNewCapacity.getText().trim().equals("")) {
            jLabelEmptyVenue.setText("Venue name cannot be empty!");
            jLabelEmptyType.setText("Venue type cannot be empty!");
            jLabelEmptyCapacity.setText("Venue capacity cannot be empty!");
        } else if (jTextFieldNewVenueName.getText().trim().isEmpty()) {
            jLabelEmptyVenue.setText("Venue name cannot be empty!");
        } else if (jComboBoxNewVenueType.getSelectedIndex() == 0) {
            jLabelEmptyType.setText("Venue type cannot be empty!");
        } else if (jTextFieldAddNewCapacity.getText().trim().equals("")) {
            jLabelEmptyCapacity.setText("Venue capacity cannot be empty!");
        } else {
            // proceed if no empty field
            try {
                Venue newVenue = new Venue();
                boolean validate;
                int capacity = 0;
                String name = jTextFieldNewVenueName.getText();
                String type = (String) jComboBoxNewVenueType.getEditor().getItem();

                try {
                    // validation capacity: 5 <  capacity < 500
                    capacity = Integer.parseInt(jTextFieldAddNewCapacity.getText());
                    if (newVenue.validateCapacity(capacity)) {
                        validate = true;
                    } else {
                        JOptionPane.showMessageDialog(null, "Capacity cannot less than" + Venue.getMinCapacity()
                                + "and must more than " + Venue.getMaxCapacity());
                        jTextFieldAddNewCapacity.setText("");
                        validate = false;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Only number is allowed!");
                    jTextFieldAddNewCapacity.setText("");
                    validate = false;
                }

                name = name.toUpperCase();
                type = type.toUpperCase();
                newVenue = new Venue(name, type, capacity);

                // check whether the inserting of new venue is valid or not
                for (int i = 1; i <= venueList.length(); i++) {
                    // check whether the new venue entry is matched with any element in the arraylist or not, if yes,cannot continue
                    if (name.equals(venueList.getEntry(i).getVenueName())) {
                        JOptionPane.showMessageDialog(null, "Duplicated venue name found!");
                        successful = false;
                        break;
                    } else {
                        try {
                            // validation capacity: 5 <  capacity < 500 , succesful return true for no duplicated venue!
                            capacity = Integer.parseInt(jTextFieldAddNewCapacity.getText());
                            if (newVenue.validateCapacity(capacity)) {
                                validate = true;
                                successful = true;
                            } else {
                                JOptionPane.showMessageDialog(null, "Capacity cannot less than" + Venue.getMinCapacity()
                                        + "and must more than " + Venue.getMaxCapacity());
                                jTextFieldAddNewCapacity.setText("");
                                validate = false;
                            }
                        } catch (NumberFormatException e) {
                            System.out.println("" + e);
                            successful = false;
                            jLabelEmptyCapacity.setText("Invalid integer detected!");
                        }
                    }
                }

                // if successful and validation is true, then insert new venue entry into venue list
                if (successful && validate) {
                    venueList.insert(newVenue);
                    venuefile.writer(newVenue, "VenueFile.txt");
                    JOptionPane.showMessageDialog(null, "Venue added successfully!");
                    new VenueManagement().setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Failed to add new venue!");

                }
            } catch (HeadlessException | NumberFormatException e) {
                System.out.println("" + e);
                jLabelEmptyCapacity.setText("Please enter valid integer!");
                jTextFieldAddNewCapacity.setText("");
            }
        }
    }//GEN-LAST:event_jButtonConfirmActionPerformed

    private void jTextFieldNewVenueNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNewVenueNameKeyReleased
        // TODO add your handling code here:
        // make validate text to be invisible
        jLabelEmptyVenue.setText("");
    }//GEN-LAST:event_jTextFieldNewVenueNameKeyReleased

    private void jTextFieldAddNewCapacityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAddNewCapacityKeyReleased
        // TODO add your handling code here:
        // make validate text to be invisible
        jLabelEmptyCapacity.setText("");
    }//GEN-LAST:event_jTextFieldAddNewCapacityKeyReleased

    private void jComboBoxNewVenueTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNewVenueTypeItemStateChanged
        // TODO add your handling code here:
        // set the capacity based on the type of venue
        jLabelEmptyType.setText("");
        if (jComboBoxNewVenueType.getSelectedIndex() == 0) {
            jLabelEmptyType.setText("Please choose a valid type!");
        }
        switch (jComboBoxNewVenueType.getSelectedIndex()) {
            case 0:
                jLabelEmptyType.setText("Please choose a valid type!");
                jTextFieldAddNewCapacity.setText("");
                break;
            case 1:
                jTextFieldAddNewCapacity.setText("30");
                break;
            case 2:
                jTextFieldAddNewCapacity.setText("50");
                break;
            case 3:
                jTextFieldAddNewCapacity.setText("100");
                break;
            case 4:
                jTextFieldAddNewCapacity.setText("300");
                break;
            case 5:
                jTextFieldAddNewCapacity.setText("500");
                break;
            default:
                // enable the capacity text field if new venue type is entered
                jTextFieldAddNewCapacity.setEnabled(true);
                jTextFieldAddNewCapacity.setEditable(true);
                jTextFieldAddNewCapacity.setText("");
                break;
        }
    }//GEN-LAST:event_jComboBoxNewVenueTypeItemStateChanged

    private void jTextFieldOtherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldOtherKeyReleased
        // TODO add your handling code here:
        // make validate text to be invisible 
        jLabelEmptyOther.setText("");
    }//GEN-LAST:event_jTextFieldOtherKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        new VenueManagement().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddNewVenue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddNewVenue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddNewVenue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNewVenue.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddNewVenue().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonAddNewType;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConfirm;
    private javax.swing.JComboBox<String> jComboBoxNewVenueType;
    private javax.swing.JLabel jLabelAddNewVenue;
    private javax.swing.JLabel jLabelEmptyCapacity;
    private javax.swing.JLabel jLabelEmptyOther;
    private javax.swing.JLabel jLabelEmptyType;
    private javax.swing.JLabel jLabelEmptyVenue;
    private javax.swing.JLabel jLabelNewCapacity;
    private javax.swing.JLabel jLabelNewVenueName;
    private javax.swing.JLabel jLabelNewVenueType;
    private javax.swing.JLabel jLabelOther;
    private javax.swing.JTextField jTextFieldAddNewCapacity;
    private javax.swing.JTextField jTextFieldNewVenueName;
    private javax.swing.JTextField jTextFieldOther;
    // End of variables declaration//GEN-END:variables

}
