package client;

import adt.*;
import entity.*;
import java.awt.Font;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jing Hui
 */
public class EventDriver extends javax.swing.JFrame {

    private InfiniteListInterface<Event> eventList = new DoublyLinkedList<>();
    private ListInterface<BookingDetails> bookingList = new ArrayList<>();
    private InfiniteSortedListInterface<MemberRegistration> memberList = new SortedLinkedList<>();

    private final EventFile eventFile = new EventFile();
    private final BookingDetailsFile bdfile = new BookingDetailsFile();
    private final MemberRegFile memberRegFile = new MemberRegFile();
    

    public EventDriver() {
        initComponents();

        jtbEventList.getTableHeader().setFont(new Font("Trebuchet MS", Font.PLAIN, 14));

        eventList = eventFile.reader("Event.txt");
        bookingList = bdfile.reader("BookingDetailsFile.txt");
        memberList = memberRegFile.reader("memberRegistration.txt");
      
        displayEventList();

        jbtOK.setVisible(false);
        jbtCancel.setVisible(false);
        jcbCategory.setSelectedIndex(-1);
       

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtbEventList = new javax.swing.JTable();
        jbtDelete = new javax.swing.JButton();
        jbtAdd = new javax.swing.JButton();
        jbtClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtfNo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfSociety = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtfDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfStartTime = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtfEndTime = new javax.swing.JTextField();
        jtfpnum = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jbtUpdate = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jtbSearchName = new javax.swing.JButton();
        jtbSummary = new javax.swing.JButton();
        jcbCategory = new javax.swing.JComboBox<>();
        jbtOK = new javax.swing.JButton();
        jbtCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtfVenue = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jtfOrganizer = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Event List");

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        jtbEventList.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        jtbEventList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "No.", "Society", "Organizer", "Event Name", "Category", "Date", "From Time", "To Time", "No. of Participants", "Venue 1", "Venue 2", "Venue 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbEventList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtbEventList.setRowHeight(30);
        jtbEventList.getTableHeader().setReorderingAllowed(false);
        jtbEventList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbEventListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtbEventList);

        jbtDelete.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jbtDelete.setText("Delete");
        jbtDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDeleteActionPerformed(evt);
            }
        });

        jbtAdd.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jbtAdd.setText("Add");
        jbtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAddActionPerformed(evt);
            }
        });

        jbtClose.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jbtClose.setText("Back to Menu");
        jbtClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCloseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Society");

        jtfNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfNo.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("No. ");

        jtfSociety.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfSociety.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Organizer");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Event Name");

        jtfName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfName.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Category");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Date");

        jtfDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfDate.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Time");

        jtfStartTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfStartTime.setEnabled(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("To");

        jtfEndTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfEndTime.setEnabled(false);

        jtfpnum.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfpnum.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Participant No.");

        jbtUpdate.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jbtUpdate.setText("Update");
        jbtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUpdateActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Venue");

        jtbSearchName.setText("Search Event Name");
        jtbSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbSearchNameActionPerformed(evt);
            }
        });

        jtbSummary.setText("Summary");
        jtbSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbSummaryActionPerformed(evt);
            }
        });

        jcbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Meeting", "Workshop", "Fund Raising", "Talk", "Annual General Meeting", "One-day Camp", "Competition", "Seminar", "Sports Carnival" }));
        jcbCategory.setEnabled(false);

        jbtOK.setText("Ok");
        jbtOK.setEnabled(false);
        jbtOK.setOpaque(false);
        jbtOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtOKActionPerformed(evt);
            }
        });

        jbtCancel.setText("Cancel");
        jbtCancel.setEnabled(false);
        jbtCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtCancelActionPerformed(evt);
            }
        });

        jtfVenue.setBackground(new java.awt.Color(204, 204, 204));
        jtfVenue.setColumns(20);
        jtfVenue.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfVenue.setRows(5);
        jtfVenue.setEnabled(false);
        jScrollPane1.setViewportView(jtfVenue);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("From");

        jtfOrganizer.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jtfOrganizer.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtbSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtbSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfName)
                            .addComponent(jtfpnum)
                            .addComponent(jcbCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addComponent(jtfDate)
                            .addComponent(jtfSociety, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfNo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jtfOrganizer, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(53, 53, 53))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jbtDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jbtClose, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(133, 133, 133))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbtOK, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbtCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175))))
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtbSummary, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jtbSearchName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jtfNo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jtfSociety)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jtfOrganizer, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfpnum, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jtfStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jtfEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtOK)
                    .addComponent(jbtCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtClose, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDeleteActionPerformed
        int deletePos = -1;

        if (!jtfNo.getText().isBlank()) {
            deletePos = Integer.parseInt(jtfNo.getText());
        }

        if (deletePos != -1) {
            // 0=yes, 1=no, 2=cancel
            int option = JOptionPane.showConfirmDialog(this, "Do you confirm to delete this event?");

            if (option == 0) {
                Event deletedEvent = eventList.remove(deletePos);

                if (deletedEvent != null) {
                    for (int i = 1; i <= bookingList.length(); i++) {

                        if (deletedEvent.equals(bookingList.getEntry(i).getEvent())) {
                            bookingList.remove(i);

                        }
                    }

                    displayEventList();

                    eventFile.rewrite((DoublyLinkedList) eventList, "Event.txt");
                    bdfile.rewrite((ArrayList) bookingList, "BookingDetailsFile.txt");
                    // reset all the textfiled
                    jtfNo.setText("");
                    jtfSociety.setText("");
                    jtfOrganizer.setText("");
                    jtfName.setText("");
                    jcbCategory.setSelectedIndex(-1);
                    jtfDate.setText("");
                    jtfStartTime.setText("");
                    jtfEndTime.setText("");
                    jtfpnum.setText("");
                    jtfVenue.setText("");

                    // prompt messages to notify succeed in deletion
                    Icon icon = new javax.swing.ImageIcon(getClass().getResource("/images/tick.png"));
                    JOptionPane.showMessageDialog(this, "Event has been deleted successfully!",
                            "Notice", JOptionPane.INFORMATION_MESSAGE, icon);

                } else {
                    JOptionPane.showMessageDialog(this, "Invalid Position", "Alert", JOptionPane.WARNING_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select the row of data that want to delete.",
                    "Alert", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jbtDeleteActionPerformed

    private void jbtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAddActionPerformed
     
        new EventRegistrationDriver().setVisible(true);
        this.dispose(); // close current frame
    }//GEN-LAST:event_jbtAddActionPerformed

    private void jbtCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCloseActionPerformed
       new MainMenu().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jbtCloseActionPerformed

    private void jtbEventListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbEventListMouseClicked

        showInfo();
        
    }//GEN-LAST:event_jtbEventListMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void jbtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUpdateActionPerformed

        if (!jtfNo.getText().isBlank()) {
            // enable those editable data
            jtfOrganizer.setEnabled(true);
            jtfName.setEnabled(true);
            jcbCategory.setEnabled(true);

            jbtOK.setVisible(true);
            jbtCancel.setVisible(true);
            jbtOK.setEnabled(true);
            jbtCancel.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select the row of data that want to update.",
                    "Alert", JOptionPane.WARNING_MESSAGE);
        } 
 
    }//GEN-LAST:event_jbtUpdateActionPerformed

    private void jtbSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbSearchNameActionPerformed
        jtbEventList.getSelectionModel().clearSelection(); // remove focus from jtable
        int found = -1;
        String name = JOptionPane.showInputDialog(this, "Enter the name of event to search: ");

        try {
            DefaultTableModel model = (DefaultTableModel) jtbEventList.getModel();

            for (int i = 0; i < jtbEventList.getRowCount(); i++) {
                String cmpName = model.getValueAt(i, 3).toString().toUpperCase().replaceAll("\\s", ""); //remove space

                if (cmpName.equals(name.toUpperCase().replaceAll("\\s", ""))) {
                    jtfNo.setText(model.getValueAt(i, 0).toString());
                    jtfSociety.setText(model.getValueAt(i, 1).toString());
                    jtfOrganizer.setText(model.getValueAt(i, 2).toString());
                    jtfName.setText(model.getValueAt(i, 3).toString());
                    setCategory(model.getValueAt(i, 4).toString());
                    jtfDate.setText(model.getValueAt(i, 5).toString());
                    jtfStartTime.setText(model.getValueAt(i, 6).toString());
                    jtfEndTime.setText(model.getValueAt(i, 7).toString());
                    jtfpnum.setText(model.getValueAt(i, 8).toString());
                    jtfVenue.setText("1. " + model.getValueAt(i, 9).toString() + "\n"
                + "2. " + model.getValueAt(i, 10).toString() + "\n"
                + "3. " + model.getValueAt(i, 11).toString());

                    jtbEventList.setRowSelectionInterval(i, i);
                    found++;
                    break;
                }
            }
            if (found == -1) {
                JOptionPane.showMessageDialog(this, "Record not found.", "Alert", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NullPointerException e) {
        }
        
    }//GEN-LAST:event_jtbSearchNameActionPerformed

    private void jtbSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbSummaryActionPerformed

       new EventSummary().setVisible(true);
    }//GEN-LAST:event_jtbSummaryActionPerformed

    private void jbtCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtCancelActionPerformed
        showInfo();
        
        quitUpdateMode();
    }//GEN-LAST:event_jbtCancelActionPerformed

   

    private void jbtOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtOKActionPerformed
  
        int updatePos;
        MemberRegistration sm = new MemberRegistration();
        boolean organizerComplete = false;
        Event updateEvent = new Event();

        if (!jtfOrganizer.getText().isBlank() && !jtfName.getText().isBlank() && !jtfpnum.getText().isBlank()) {
            updatePos = Integer.parseInt(jtfNo.getText());

            String organizer = jtfOrganizer.getText().toUpperCase().replaceAll("\\s", "");
            String name = jtfName.getText();
            String partiNo = jtfpnum.getText();
            DefaultTableModel model = (DefaultTableModel) jtbEventList.getModel();

            for (int i = 1; i <= memberList.getLength(); i++) {
                if (organizer.equals(memberList.getEntry(i).getStudent().getName().toUpperCase().replaceAll("\\s", ""))) {
                    if (eventList.getEntry(updatePos).getSocietyMem().
                            getSociety().equals(memberList.getEntry(i).getSociety())) {
                        sm = memberList.getEntry(i);
                        organizerComplete = true;
                        break;
                    }

                }
            }

            if (!organizerComplete) {
                JOptionPane.showMessageDialog(this, jtfSociety.getText()
                        + " do not consist this member", "ERROR", JOptionPane.ERROR_MESSAGE);
                jtfOrganizer.grabFocus();
            }


            if (organizerComplete) {
                // 0=yes, 1=no, 2=cancel
                int option = JOptionPane.showConfirmDialog(this, "Do you confirm to update this event?");

                if (option == 0) {
                    Event oldEvent = eventList.getEntry(updatePos);
                    updateEvent = eventList.getEntry(updatePos);

                    updateEvent.setSocietyMem(sm);
                    updateEvent.setName(name);
                    updateEvent.setCategory(jcbCategory.getSelectedItem().toString());
                    updateEvent.setNumOfParticipant(Integer.parseInt(partiNo));

                    if (eventList.replace(updatePos, updateEvent)) {
                        // update booking details                      
                        for (int i = 1; i <= bookingList.length(); i++) {

                            if (oldEvent.equals(bookingList.getEntry(i).getEvent())) {
                                bookingList.replace(i, new BookingDetails(updateEvent, bookingList.getEntry(i).getBookedVenue()));

                            }
                        }

                        eventFile.rewrite((DoublyLinkedList) eventList, "Event.txt");
                        bdfile.rewrite((ArrayList) bookingList, "BookingDetailsFile.txt");
                        displayEventList();

                        // reset all the textfiled                             
                        jtfOrganizer.setText(updateEvent.getSocietyMem().getStudent().getName());
                        jtfName.setText(updateEvent.getName());
                        setCategory(updateEvent.getCategory());
                        jtfpnum.setText(Integer.toString(updateEvent.getNumOfParticipant()));

                        // prompt messages to notify succeed in deletion
                        Icon icon = new javax.swing.ImageIcon(getClass().getResource("/images/tick.png"));
                        JOptionPane.showMessageDialog(this, "Event has been updated successfully!",
                                "Notice", JOptionPane.INFORMATION_MESSAGE, icon);

                        quitUpdateMode();

                    } else {
                        JOptionPane.showMessageDialog(this, "Update failed.", "Alert", JOptionPane.WARNING_MESSAGE);
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Incomplete Information",
                    "Alert", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_jbtOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventDriver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtAdd;
    private javax.swing.JButton jbtCancel;
    private javax.swing.JButton jbtClose;
    private javax.swing.JButton jbtDelete;
    private javax.swing.JButton jbtOK;
    private javax.swing.JButton jbtUpdate;
    private javax.swing.JComboBox<String> jcbCategory;
    private javax.swing.JTable jtbEventList;
    private javax.swing.JButton jtbSearchName;
    private javax.swing.JButton jtbSummary;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfEndTime;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfNo;
    private javax.swing.JTextField jtfOrganizer;
    private javax.swing.JTextField jtfSociety;
    private javax.swing.JTextField jtfStartTime;
    private javax.swing.JTextArea jtfVenue;
    private javax.swing.JTextField jtfpnum;
    // End of variables declaration//GEN-END:variables

    private void displayEventList() {

        DefaultTableModel tblModel = (DefaultTableModel) jtbEventList.getModel();
        Event event;
        String venue1 = "-";
        String venue2 = "-";
        String venue3 = "-";

        tblModel.setNumRows(0);
        try {
            for (int i = 1; i <= eventList.size(); i++) {
                event = eventList.getEntry(i);

                // booking details to find the corresponding venue
                int venueCount = 0;
                for (int j = 1; j <= bookingList.length(); j++) {

                    if (event.equals(bookingList.getEntry(j).getEvent())) {
                        venueCount++;
                        switch (venueCount) {
                            case 1 -> venue1 = bookingList.getEntry(j).getBookedVenue().getVenueName();
                            case 2 -> venue2 = bookingList.getEntry(j).getBookedVenue().getVenueName();
                            case 3 -> venue3 = bookingList.getEntry(j).getBookedVenue().getVenueName();
                        }
                    }
                   
                }

                String data[] = {Integer.toString(i), event.getSocietyMem().getSociety().getSocietyName(),
                    event.getSocietyMem().getStudent().getName(), event.getName(), event.getCategory(),
                    event.getDate().toString(), event.getStartTime().toString(),
                    event.getEndTime().toString(), Integer.toString(event.getNumOfParticipant()),
                    venue1, venue2, venue3};
                tblModel.addRow(data);
               
                venue1 = "-";
                venue2 = "-";
                venue3 = "-";
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "File is empty", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void setCategory(String category) {
        for (int i = 0; i < jcbCategory.getItemCount(); i++) {

            if (category.equals(jcbCategory.getItemAt(i))) {
                jcbCategory.setSelectedIndex(i);
            }

        }
    }

    private void quitUpdateMode() {
        jbtOK.setVisible(false);
        jbtCancel.setVisible(false);
        jbtOK.setEnabled(false);
        jbtCancel.setEnabled(false);

        jtfOrganizer.setEnabled(false);
        jtfName.setEnabled(false);
        jcbCategory.setEnabled(false);
    }

    public void showInfo() {
        DefaultTableModel model = (DefaultTableModel) jtbEventList.getModel();
        int selectedRowIndex = jtbEventList.getSelectedRow();

        jtfNo.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jtfSociety.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jtfOrganizer.setText(model.getValueAt(selectedRowIndex, 2).toString());
        jtfName.setText(model.getValueAt(selectedRowIndex, 3).toString());
        setCategory(model.getValueAt(selectedRowIndex, 4).toString());
        jtfDate.setText(model.getValueAt(selectedRowIndex, 5).toString());
        jtfStartTime.setText(model.getValueAt(selectedRowIndex, 6).toString());
        jtfEndTime.setText(model.getValueAt(selectedRowIndex, 7).toString());
        jtfpnum.setText(model.getValueAt(selectedRowIndex, 8).toString());
        jtfVenue.setText("1. " + model.getValueAt(selectedRowIndex, 9).toString() + "\n"
                + "2. " + model.getValueAt(selectedRowIndex, 10).toString() + "\n"
                + "3. " + model.getValueAt(selectedRowIndex, 11).toString());
    }
}
